/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows public read access with owner-only writes for prompts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Each user can only access their own profile.
 * - /prompts/{promptId}: Stores AI prompts. All users can read prompts, but only the creator can modify or delete them.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Prompts are publicly readable, but only the creator can modify or delete them.
 * - The rules enforce that the userId field in the Prompt document matches the authenticated user's UID upon creation.
 *
 * Denormalization for Authorization:
 * - The `Prompt` entity requires a `userId` field to enable owner-only writes. The rules validate this field against the authenticated user's UID.
 *
 * Structural Segregation:
 * - User profiles and prompts are stored in separate top-level collections, ensuring clear ownership and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allows a user to read their own profile
      allow get: if isOwner(userId);
      //Allows a user to list all users
      allow list: if isSignedIn();

      // Allows a user to create their own profile if the userId matches their auth UID
      allow create: if isOwner(userId);

      // Allows a user to update their own profile if the userId matches their auth UID and the document exists
      allow update: if isExistingOwner(userId);

      // Allows a user to delete their own profile if the userId matches their auth UID and the document exists
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to AI prompt documents.
     * @path /prompts/{promptId}
     * @allow (get) Any user can read any prompt.
     * @allow (list) Any user can list all prompts.
     * @allow (create) User with UID 'user123' can create a prompt with userId 'user123'.
     * @allow (update) User with UID 'user123' can update a prompt with userId 'user123'.
     * @allow (delete) User with UID 'user123' can delete a prompt with userId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a prompt with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update a prompt with userId 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a prompt with userId 'user123'.
     * @principle Allows public read access but enforces owner-only writes.
     */
    match /prompts/{promptId} {
      // Allows anyone to read a prompt
      allow get, list: if true;

      // Allows a user to create a prompt if the userId field matches their auth UID
      allow create: if request.resource.data.userId == request.auth.uid;

      // Allows a user to update a prompt if they are the owner and the document exists
      allow update: if isExistingOwner(resource.data.userId);

      // Allows a user to delete a prompt if they are the owner and the document exists
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }

  // Helper function to check if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to check if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to check if the user is the owner of the document and the document exists
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}