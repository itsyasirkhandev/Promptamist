/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access their own data. It prioritizes security by default, denying access unless
 * explicitly granted. Data shape validation is minimized for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read their own profile.
 * - /prompts/{promptId}: Stores AI prompts created by users. Each prompt has a `userId` field
 *   indicating the owner. Users can only manage their own prompts.
 *
 * Key Security Decisions:
 * - Users cannot list all users. This prevents potential information leakage.
 * - All write operations are protected by authorization checks.
 * - List operations on `/prompts` require the user to filter the query by their own `userId`.
 *
 * Denormalization for Authorization:
 * - The `Prompt` entity includes a `userId` field, which is essential for ownership checks.
 *   This avoids the need for complex queries or additional reads to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // --- Users Collection ---
    /**
     * @description Secure user profiles.  Users can ONLY read their own profile. They cannot write to it or list all users.
     * @path /users/{userId}
     * @allow (get) User A with UID "user_abc" can read their own profile at /users/user_abc.
     * @deny (list) No one can list all users.
     * @deny (create) No one can create a user profile directly (Auth triggers do this).
     * @deny (update) No one can update a user profile directly.
     * @deny (delete) No one can delete a user profile directly.
     * @principle Enforces strict user ownership for reads; denies all writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list, create, update, delete: if false;
    }


    // --- Prompts Collection ---
    /**
     * @description Secure AI prompts. Users can fully manage their OWN prompts, but cannot see prompts from other users.
     * @path /prompts/{promptId}
     * @allow (get) User A with UID "user_abc" can read a prompt at /prompts/prompt_123 if the prompt's userId is "user_abc".
     * @allow (list) User A with UID "user_abc" can list prompts if the query filters by userId == "user_abc".
     * @allow (create) User A with UID "user_abc" can create a prompt at /prompts/prompt_456 if the prompt's userId is set to "user_abc".
     * @allow (update) User A with UID "user_abc" can update a prompt at /prompts/prompt_123 if they are the owner (userId matches).
     * @allow (delete) User A with UID "user_abc" can delete a prompt at /prompts/prompt_123 if they are the owner.
     * @deny (get) User A cannot read a prompt owned by User B.
     * @deny (list) User A cannot list prompts without filtering by their own userId.
     * @deny (create) User A cannot create a prompt with User B as the owner.
     * @deny (update) User A cannot update a prompt owned by User B.
     * @deny (delete) User A cannot delete a prompt owned by User B.
     * @principle Enforces user ownership for all operations on prompts.  List requires filtering by user ID.
     */
    match /prompts/{promptId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && request.query.field == 'userId' && request.query.op == '==' && request.query.value == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }
  }
}