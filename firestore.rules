/**
 * @fileOverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for prompts and user profiles. Users can only read and write their own data. Public listing of prompts is allowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /prompts/{promptId}: Stores AI prompts created by users.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own prompts.
 * - Users can only read and write their own user profiles.
 * - Public listing of prompts is allowed for all users.
 *
 * Denormalization for Authorization:
 * The 'Prompt' entity requires the 'userId' field to be present for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document (for update/delete)
      function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource.data.uid == userId;
      }

      // Allow a user to create their own profile if the UID matches the document ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;

      // Allow a user to get their own profile
      allow get: if isSignedIn() && isOwner(userId);

      // Allow a user to update their own profile, enforcing immutability of the UID
      allow update: if isExistingOwner(userId);

      // Allow a user to delete their own profile
      allow delete: if isExistingOwner(userId);

      // Prevent listing all users.
      allow list: if false;
    }

    /**
     * @description Manages AI prompts created by users.
     * @path /prompts/{promptId}
     * @allow (create) - User with UID 'user123' can create a prompt with userId 'user123'.
     * @allow (get, list) - Any user (or no user) can read any prompt.
     * @allow (update, delete) - User with UID 'user123' can update/delete their own prompt at /prompts/{promptId} if the prompt's userId is 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a prompt with userId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the prompt at /prompts/{promptId} if the prompt's userId is 'user123'.
     * @principle Enforces document ownership for writes, allows public reads, and validates relational integrity.
     */
    match /prompts/{promptId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the prompt
      function isOwner(promptUserId) {
        return isSignedIn() && request.auth.uid == promptUserId;
      }

      // Helper function to check if the user is the existing owner of the prompt (for update/delete)
      function isExistingOwner(promptUserId) {
        return isSignedIn() && request.auth.uid == promptUserId;
      }

      // Allow anyone to read prompts
      allow get, list: if true;

      // Allow a user to create a prompt if they are the owner
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);

      // Allow a user to update a prompt if they are the owner
      allow update: if isExistingOwner(resource.data.userId);

      // Allow a user to delete a prompt if they are the owner
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}