/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a user-ownership model for AI prompts. Users can only read their own profile data and manage their own prompts.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, readable only by the user themselves.
 * - /prompts/{promptId}: Stores AI prompts created by users, accessible only to the creator.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data (get). Listing all users is disallowed.
 * - Users can only create, update, and delete their own prompts.
 * - The prompt document stores the userId of the creator for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if a user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {bool} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Validates the character limits for the prompt fields.
     */
    function validatePromptData(data) {
      return data.title.size() <= 100
        && data.content.size() <= 5000
        && (data.tags.size() <= 30)
        && (!('templateInput' in data) || data.templateInput.size() <= 100)
        && (!('textArea' in data) || data.textArea.size() <= 3000)
        && (!('choices' in data) || data.choices.size() <= 100)
        && (!('number' in data) || string(data.number).size() <= 100);
    }
    
    /**
     * @description Rule for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (get) User 'A' can read their own profile data.
     * @deny (list) No one can list all users.
     * @deny (create) No one can create a user document directly.
     * @deny (update) No one can update a user document directly.
     * @deny (delete) No one can delete a user document directly.
     * @principle Enforces document ownership for reads and prevents unauthorized data access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for /prompts/{promptId} documents.
     * @path /prompts/{promptId}
     * @allow (get) User 'A' can read their own prompt.
     * @allow (list) Any signed-in user can list prompts (but will only see their own due to the 'get' rule).
     * @allow (create) User 'A' can create a prompt with themselves as the owner.
     * @allow (update) User 'A' can update their own prompt.
     * @allow (delete) User 'A' can delete their own prompt.
     * @deny (get) User 'B' cannot read User A's prompt.
     * @deny (create) User 'B' cannot create a prompt owned by User A.
     * @deny (update) User 'B' cannot update User A's prompt.
     * @deny (delete) User 'B' cannot delete User A's prompt.
     * @principle Enforces document ownership for writes and restricts access to a user's own prompts.
     */
    match /prompts/{promptId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn()
                      && request.resource.data.userId == request.auth.uid
                      && validatePromptData(request.resource.data);
      allow update: if isSignedIn()
                      && resource.data.userId == request.auth.uid
                      && validatePromptData(request.resource.data);
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
  }
}