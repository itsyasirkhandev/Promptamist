/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for prompts and user profiles.
 * Users can only read and write their own prompts and profile data. Public
 * listing of prompts is allowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /prompts/{promptId}: Stores AI prompts.
 *
 * Key Security Decisions:
 * - Users can only manage their own prompts (create, update, delete).
 * - Public listing of prompts is enabled for discovery.
 * - User profiles are private and only accessible to the owner.
 *
 * Denormalization for Authorization:
 * The `Prompt` entity contains a `userId` field to directly link it to its owner.
 * This avoids needing to perform complex queries or joins in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @allow (get) User with uid 'user123' can read their profile.
     * @allow (update) User with uid 'user123' can update their profile.
     * @allow (delete) User with uid 'user123' can delete their profile.
     * @deny (create) User with uid 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with uid 'user456' cannot read profile with ID 'user123'.
     * @deny (update) User with uid 'user456' cannot update profile with ID 'user123'.
     * @deny (delete) User with uid 'user456' cannot delete profile with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores AI prompts created by users.
     * @path /prompts/{promptId}
     * @allow (create) User with uid 'user123' can create a prompt with userId 'user123'.
     * @allow (get) Any user can read a prompt.
     * @allow (list) Any user can list prompts.
     * @allow (update) User with uid 'user123' can update their prompt.
     * @allow (delete) User with uid 'user123' can delete their prompt.
     * @deny (create) User with uid 'user456' cannot create a prompt with userId 'user123'.
     * @deny (update) User with uid 'user456' cannot update prompt created by 'user123'.
     * @deny (delete) User with uid 'user456' cannot delete prompt created by 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /prompts/{promptId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}