/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * read and manage data they own. All write operations are protected by
 * authorization checks based on the authenticated user's UID. Data
 * validation is minimal to allow for rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each document is
 *   owned by the corresponding user.
 * - /prompts/{promptId}: Stores AI prompts created by users. Each prompt
 *   document has a 'userId' field indicating ownership.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for privacy reasons.
 * - For prompts, read and write access is granted based on the 'userId' field
 *   within the document, ensuring that users can only manage their own prompts.
 * - In this phase, schema validation is relaxed to facilitate quick iterations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // This function checks if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // This function checks if the requesting user is the owner of the document.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // This function checks if the requesting user is the owner of the existing document.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for profile data. Users can only read their own profile.
     * @path /users/{userId}
     * @allow (get) User 'user_abc' can read their own profile at /users/user_abc.
     * @deny (create) User 'user_abc' cannot create a profile document at /users/user_xyz.
     * @deny (update) User 'user_abc' cannot update another user's profile at /users/user_xyz.
     * @deny (delete) User 'user_abc' cannot delete another user's profile at /users/user_xyz.
     * @principle Enforces strict ownership; prevents unauthorized data modification.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for prompts. Users can read, create, update, and delete their own prompts.
     * @path /prompts/{promptId}
     * @allow (get) User 'user_abc' can read their own prompt at /prompts/prompt_123 if prompt_123.userId == 'user_abc'.
     * @allow (create) User 'user_abc' can create a new prompt at /prompts/prompt_456 with prompt_456.userId == 'user_abc'.
     * @allow (update) User 'user_abc' can update their own prompt at /prompts/prompt_123 if prompt_123.userId == 'user_abc'.
     * @allow (delete) User 'user_abc' can delete their own prompt at /prompts/prompt_123 if prompt_123.userId == 'user_abc'.
     * @deny (get) User 'user_abc' cannot read another user's prompt at /prompts/prompt_789 if prompt_789.userId != 'user_abc'.
     * @deny (update) User 'user_abc' cannot update another user's prompt at /prompts/prompt_789 if prompt_789.userId != 'user_abc'.
     * @deny (delete) User 'user_abc' cannot delete another user's prompt at /prompts/prompt_789 if prompt_789.userId != 'user_abc'.
     * @principle Enforces ownership based on the 'userId' field; prevents unauthorized data access and modification.
     */
    match /prompts/{promptId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }
  }
}